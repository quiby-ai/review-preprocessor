name: review-preprocessor-local

services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/dumps:/dumps
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - review-network

  kafka:
    image: redpandadata/redpanda:v24.1.10
    container_name: kafka
    command:
      - redpanda start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --set redpanda.enable_idempotence=true
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://kafka:9092
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=kafka:33145
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info --brokers localhost:9092 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 40
    depends_on:
      - postgres
    networks:
      - review-network

  console:
    image: redpandadata/console:v2.7.2
    container_name: console
    environment:
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8080:8080"
    command: >
      /bin/sh -c "
        /app/console --listen-addr=0.0.0.0:8080
        --kafka-brokers=${KAFKA_BROKERS}
      "
    depends_on:
      - kafka
    networks:
      - review-network

  kcat:
    image: edenhill/kcat:1.7.1
    platform: linux/amd64
    container_name: kcat
    command: ["sh", "-c", "sleep infinity"]
    depends_on:
      - kafka
    networks:
      - review-network

  review-preprocessor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: review_preprocessor
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - review-network

volumes:
  pgdata:

networks:
  review-network:
    driver: bridge
